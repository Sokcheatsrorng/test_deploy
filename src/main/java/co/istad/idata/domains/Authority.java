package co.istad.idata.domains;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.List;

/**
 * Represents an authority entity in the system.
 *
 * <p>This class is annotated with JPA annotations to map to a database table. It also includes
 * validation annotations to ensure data integrity.</p>
 *
 * <p>An authority represents a specific permission or privilege within the system. Authorities
 * are assigned to roles, which in turn are assigned to users.</p>
 *
 * <p>Example usage:</p>
 * <pre>
 * {@code
 * Authority authority = new Authority();
 * authority.setName("ROLE_ADMIN");
 * }
 * </pre>
 *
 * <p>Annotated with Lombok annotations for getters, setters, and a no-argument constructor.</p>
 *
 * @see Role
 * @see User
 * @see jakarta.persistence.Entity
 * @see lombok.Getter
 * @see lombok.Setter
 * @see lombok.NoArgsConstructor
 *
 * @version 1.0
 *
 * <p>Created by Sreng Chipor on 2024-06-04.</p>
 */
@Entity
@Table(name = "dt_authorities")
@Setter
@Getter
@NoArgsConstructor
public class Authority {

    /**
     * The unique identifier for the authority.
     *
     * <p>This field is auto-generated by the database.</p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the authority.
     *
     * <p>This field is required and must be unique within the system.</p>
     */
    @Column(nullable = false, unique = true)
    private String name;

    /**
     * The roles associated with this authority.
     *
     * <p>This field represents the many-to-many relationship between roles and authorities.</p>
     */
    @ManyToMany(mappedBy = "authorities")
    private List<Role> roles;
}

