package co.istad.idata.domains;

import jakarta.persistence.*;
import java.util.List;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.security.core.GrantedAuthority;

/**
 * Represents a role entity in the system.
 *
 * <p>This class is annotated with JPA annotations to map to a database table. It also includes
 * validation annotations to ensure data integrity.</p>
 *
 * <p>A role represents a set of authorities or permissions assigned to a user. Roles are used to
 * manage and group authorities in a structured way.</p>
 *
 * <p>Example usage:</p>
 * <pre>
 * {@code
 * Role role = new Role();
 * role.setName("ADMIN");
 * }
 * </pre>
 *
 * <p>Annotated with Lombok annotations for getters, setters, and a no-argument constructor.</p>
 *
 * @see Authority
 * @see User
 * @see jakarta.persistence.Entity
 * @see lombok.Getter
 * @see lombok.Setter
 * @see lombok.NoArgsConstructor
 *
 * @version 1.0
 *
 * <p>Created by Sreng Chipor on 2024-06-04.</p>
 */
@Entity
@Table(name = "dt_roles")
@Setter
@Getter
@NoArgsConstructor
public class Role implements GrantedAuthority {

    /**
     * The unique identifier for the role.
     *
     * <p>This field is auto-generated by the database.</p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the role.
     *
     * <p>This field is required and must be unique within the system.</p>
     */
    @Column(nullable = false, unique = true)
    private String name;

    /**
     * The authorities associated with this role.
     *
     * <p>This field represents the many-to-many relationship between roles and authorities.</p>
     */
    @ManyToMany(cascade = CascadeType.PERSIST)
    private List<Authority> authorities;

    /**
     * The users associated with this role.
     *
     * <p>This field represents the many-to-many relationship between roles and users.</p>
     */
    @ManyToMany(mappedBy = "roles")
    private List<User> users;

    /**
     * Returns the authority granted by this role.
     *
     * <p>This method is required by the {@code GrantedAuthority} interface and returns the role
     * name prefixed with "ROLE_".</p>
     *
     * @return the authority string
     */
    @Override
    public String getAuthority() {
        return "ROLE_" + name;
    }
}

