package co.istad.idata.domains;

import co.istad.idata.domains.audit.Auditable;
import co.istad.idata.feature.user.registration.token.VerificationToken;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;
import java.util.List;


/**
 * Represents a user entity in the system.
 *
 * <p>This class is annotated with JPA annotations to map to a database table. It extends the
 * {@link Auditable} class to include audit information. The class includes various fields to
 * represent user details and associations with roles and verification tokens.</p>
 *
 * <p>Annotated with Lombok annotations for getters, setters, and a no-argument constructor.</p>
 *
 * <p>Example usage:</p>
 * <pre>
 * {@code
 * User user = new User();
 * user.setEmail("example@example.com");
 * user.setFirstName("John");
 * user.setLastName("Doe");
 * user.setUsername("johndoe");
 * user.setPassword("securepassword");
 * }
 * </pre>
 *
 * @see Role
 * @see VerificationToken
 * @see jakarta.persistence.Entity
 * @see lombok.Getter
 * @see lombok.Setter
 * @see lombok.NoArgsConstructor
 *
 * @version 1.0
 *
 * <p>Created by Sreng Chipor on 2024-06-04.</p>
 */
@Setter
@Getter
@NoArgsConstructor
@Entity
@Table(name = "dt_users", schema = "public")
public class User extends Auditable {

    /**
     * The unique identifier for the user.
     *
     * <p>This field is auto-generated by the database.</p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The email address of the user.
     *
     * <p>This field is required and must be unique.</p>
     */
    @Column(nullable = false, unique = true)
    private String email;

    /**
     * The first name of the user.
     *
     * <p>This field is required and has a maximum length of 50 characters.</p>
     */
    @Column(nullable = false, length = 50)
    private String firstName;

    /**
     * The last name of the user.
     *
     * <p>This field is required and has a maximum length of 50 characters.</p>
     */
    @Column(nullable = false, length = 50)
    private String lastName;

    /**
     * The username of the user.
     *
     * <p>This field is required and has a maximum length of 50 characters.</p>
     */
    @Column(nullable = false, length = 50)
    private String username;

    /**
     * The position of the user within the organization.
     *
     * <p>This field has a maximum length of 50 characters.</p>
     */
    @Column(length = 50)
    private String position;

    /**
     * The password of the user.
     *
     * <p>This field is required.</p>
     */
    @Column(nullable = false)
    private String password;

    /**
     * The universally unique identifier (UUID) of the user.
     */
    private String uuid;

    /**
     * The avatar image URL of the user.
     */
    private String avatar;

    /**
     * Indicates whether the user's account is expired.
     */
    private boolean isAccountNonExpired;

    /**
     * Indicates whether the user's account is locked.
     */
    private boolean isAccountNonLocked;

    /**
     * Indicates whether the user's credentials are expired.
     */
    private boolean isCredentialsNonExpired;

    /**
     * Indicates whether the user is blocked.
     */
    private Boolean isBlocked;

    /**
     * Indicates whether the user is deleted.
     */
    private Boolean isDeleted;

    /**
     * Indicates whether the user's profile is visible.
     */
    private Boolean isProfiledVisibility;

    /**
     * Indicates whether the user's email is verified.
     */
    private Boolean isEmailVerified;

    /**
     * The date and time of the user's last login.
     */
    private LocalDateTime lastLoginAt;

    /**
     * The roles associated with this user.
     *
     * <p>This field represents the many-to-many relationship between users and roles.</p>
     */
    @ManyToMany(fetch = FetchType.EAGER, cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    @JoinTable(name = "dt_users_roles",
            joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"),
            inverseJoinColumns = @JoinColumn(name = "role_id", referencedColumnName = "id"))
    private List<Role> roles;

    /**
     * The verification tokens associated with this user.
     *
     * <p>This field represents the one-to-many relationship between users and verification tokens.</p>
     */
    @OneToMany(mappedBy = "user")
    private List<VerificationToken> tokens;
}
